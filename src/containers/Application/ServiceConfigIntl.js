/**
 * Licensed Materials - Property of tenxcloud.com
 * (C) Copyright 2018 TenxCloud. All Rights Reserved.
 */

/**
 * Service configuration intl message
 *
 * @author zhangxuan
 * @date 2018-08-28
 */
import { defineIntlMessages } from '../../common/tools'
import {mapData} from "../../components/AppModule/ServiceIntl/AppServiceDetailIntl";

const messageObj = {
  prefix: 'ServiceConfig',
  data: {
    imageNotExist: '运行环境的镜像（版本）不存在',
    contactAdmin: '请联系管理员上传',
    appName: '应用名称',
    appTemplate: '应用模板',
    appTemplateVersion: '模板版本',
    appTemplateDesc: '模板描述',
    nameExisted: '{item}名称重复',
    pleaseEnter: '请输入{item}{end}',
    appTempDescLengthLimit: '模板描述不能超过1000个字符',
    serviceNameRegLimit: '服务名称可由 3~60 位小写字母、数字、中划线组成，以小写字母开头，小写字母或者数字结尾',
    serviceName: '服务名称',
    requiredMessage: '{item}至少为3个字符',
    imageAddress: '镜像地址',
    templateName: '模板名称',
    wrap: '应用包',
    modelSet: '模型集',
    operatingEnv: '运行环境',
    image: '镜像',
    address: '地址',
    env: '环境',
    version: '版本',
    operation: '运行',
    noMsaSuiteTip: '当前项目未配置微服务治理套件，请联系基础设施管理员安装',
    loadingApm: '加载 apm 中',
    noApmInstalledTip: '当前项目未安装 APM Agent，请联系基础设施管理员安装',
    open: '开',
    close: '关',
    viewMiddleware: '查看支持的中间件',
    confirm: '确定',
    notOpenYet: '暂不开通',
    openApm: '我知道了，开通 APM',
    enablePerformanceManagement: '启用性能管理',
    apmNotice: '应用性能管理（APM）- 须知',
    JVMConfigTitle: '需要如下 JVM 配置',
    addJVM: '设置 Pinpoint agent id，需要提前在镜像中添加 JVM 参数：-Dpinpoint.agentId=${POD_IP}',
    example: '示例',
    apmMiddlewareTitle: '支持的中间件如下',
    apmMiddlewareTip: '确认镜像所用中间件在上述列表内，且满足 JVM 配置',
    noIstioTip: '当前集群未安装 istio，请联系基础设施管理员安装',
    apmDisabledTip: '当前项目禁止安装 APM 组件，请联系平台管理员了解',
    serviceMeshCheckedTip: '当前项目已经开通服务网格，此服务将默认开启状态，服务将由服务网格代理，使用微服务中心提供的治理功能',
    serviceMeshUncheckTip: '开通后, 此服务将由服务网格代理, 使用微服务中心提供的治理功能',
    enableServiceMesh: '启用服务网格',
    theLatestVersion: '最新版本',
    connectToOracle: '连接Oracle',
    operatingEnvTip: '设置 JAVA_OPTS：在下一步『配置服务』页面，配置环境变量中修改 JAVA_OPTS 键对应的值',
    advancedSettings: '高级设置',
    selectVersion: '选择版本',
    appList: '应用列表',
    serviceAndNodeAffinity: '服务与节点亲和',
    hostTagValue: '主机标签值',
    requiredInfo: '必填信息',
    added: '已添加',
    currentService: '当前服务',
    theBest: '最好',
    must: '必须',
    schedulingToHost: '调度到主机',
    hostLabelKey: '主机标签键',
    operator: '操作符',
    add: '添加',
    serviceTagValue: '服务标签值',
    labelValueLengthLimit: '每个标签值长度为3~63位',
    labelValueRegMessage: '每个标签值以字母或数字开头和结尾中间可(_-)',
    serviceLabelValuePlaceholder: '服务标签值，e.g. abc,123',
    serviceLabelKey: '服务标签键',
    labelKeyLengthLimit: '标签键长度为3~63位',
    labelKeyRegMessage: '以字母或数字开头和结尾中间可(_-)',
    affinityTip: '决定服务实例可以部署在哪些主机上',
    bestNot: '最好不',
    mustNot: '必须不',
    withService: '与服务',
    sameTopologyDomain: '在同一拓扑域',
    sameHostLabelKey: '具有相同的主机标签键',
    affinityAdvancedSettingsTip: '『当前服务』中的容器实例必须『分散』在不同的节点上',
    serviceAndServiceAffinity: '服务与服务亲和',
    serAndSerAffinityTip: '决定服务实例可以和哪些服务实例部署在同一拓扑域 (具有相同的主机标签键) 上',
    replicaLengthLimit: '实例数量为 1~10 之间',
    pleaseSelectBindNode: '请选择绑定节点',
    defaultScheduling: '使用系统默认调度',
    containerCount: '容器：{count}个',
    specifyHostAndIP: '指定主机名及IP上运行',
    serAndSerAffinityNature: '服务与服务的亲和性',
    serAndNodeAffinityNature: '定义服务与节点亲和性',
    insAndInsAffinityNature: '服务实例与服务实例的亲和性',
    nodeScheduling: '节点调度',
    minMemory: '最小内存',
    maxMemory: '最大内存',
    minCpu: '最小 CPU',
    maxCpu: '最大 CPU',
    maxGpu: '最大 GPU',
    nodeSchedulingTitle: '容器调度策略支持：指定主机名及IP上运行、服务与节点亲和性、服务与服务的亲和性',
    baseConfig: '基本配置',
    baseConfigTitle: '服务的计算资源、服务类型、以及实例个数等设置',
    containerConfig: '容器配置',
    expansionTip: '专业版及企业认证用户可申请扩大容器配置',
    x86Radio: 'X86 计算',
    gpuRadio: '高性能计算 GPU',
    memory: '内存',
    customize: '自定义',
    core: '核',
    gpuCount: '颗 GPU',
    gpuTip: '* GPU 配置仅支持整数颗，GPU 型号根据不同节点，类型可能不同。',
    statelessService: '无状态服务',
    statefulService: '有状态服务',
    bindings: '已绑定',
    unbound: '未绑定',
    dynamicGeneration: '动态生成',
    readOnly: '只读',
    addContainer: '添加一个容器目录',
    localStorage: '本地存储',
    exclusiveType: '独享型',
    sharedType: '共享型',
    unknown: '未知',
    serviceType: '服务类型',
    dataPersistenceTip: '若需数据持久化，请使用有状态服务',
    noStorageServiceTip: '无存储服务可用, 请配置存储服务',
    exclusiveTypeTip: '独享型存储，仅支持一个容器实例读写操作；',
    sharedTypeTip: '共享型支持多个容器实例同时对同一个存储卷读写操作；',
    localStorageTip: '本地存储支持在宿主机节点上保存数据。',
    storageModalTitle: '添加容器目录',
    editStorageModalTitle: '修改容器目录',
    storageName: '存储名称',
    storageNameExist: '存储名称已存在',
    storageVolumeSetting: '存储卷设置',
    storageSize: '存储大小',
    canNotBeEmpty: '不能为空',
    bindingNode: '绑定节点',
    hostDirectory: '宿主机目录',
    plsEnterCorrectPath: '请输入正确的路径',
    dynGenerateStorageVolume: '动态生成一个存储卷',
    storageType: '存储类型',
    pleaseSelect: '请选择{item}',
    storageVolume: '存储卷',
    storageInstructions: '服务中含有以下设置不能添加',
    storageInstructionsFirst: '1.服务中的容器数量大于1个（不含1）；',
    storageInstructionsSecond: '2.开启自动伸缩的服务；',
    blockStorage: '块存储',
    selectStorage: '选择存储',
    storageCluster: '存储集群',
    containerDirectory: '容器目录',
    containerDirIsRequired: '容器目录不能为空',
    serverDir: 'server共享目录',
    pleaseInputServerDir: '请输入 server共享目录',
    random: '系统随机',
    custom: '自定义',
    pathInCorrect: '请输入正确的路径',
    pathExist: '已填写过该路径',
    readWritePermission: '读写权限',
    readWrite: '可读可写',
    cancel: '取消',
    instanceNum: '实例数量',
    fixedInstanceIP: '固定实例 IP',
    one: '个',
    publicNetTip: '服务可通过公网访问，选择一个网络出口；',
    interNetTip: '服务可通过内网访问，选择一个网络出口；',
    clusterTip: '服务仅提供给集群内其他服务访问；',
    noNexportTip: '暂无此类网络出口',
    exportID: '出口ID',
    exportIDTip: '出口ID用于编辑编排文件',
    copySuccess: '复制成功',
    clickToCopy: '点击复制',
    plsSltNexport: '请选择一个网络出口',
    nexport: '网络出口',
    accessMethodTabTip: '部署时只能使用模板中配置的访问方式',
    accessMethod: '访问方式',
    clusterNexport: '集群网络出口',
    loadBalance: '应用负载均衡',
    publicNetAccess: '可公网访问',
    intranetAccess: '内网访问',
    clusterAccess: '仅在集群内访问',
    loadBalanceTip: '模板中只需选择网络出口类型，部署应用时，会自动选择对应类型网络出口！',
    notEnabled: '未启用',
    activated: '已启用',
    name: '名称',
    schedulingAlgorithm: '调度算法',
    weights: '权重',
    sessionSticky: '会话保持',
    serviceLocation: '服务位置',
    containerPort: '容器端口',
    listeningPort: '监听端口',
    operate: '操作',
    noListenConfig: '暂无监听配置',
    monitorNameExist: '监听器名称已经存在',
    verRuleExist: '校验规则已经存在',
    ingressName: '监听器名称',
    ingressNameRegMessage: '可由数字、中划线组成，以字母或者数字开头，字母或者数字结尾',
    appNameCheckStartMessage: '请以字母开头',
    appNameCheckComposeMessage: '由字母、数字、中划线-、下划线_组成',
    appNameMinLength: '至少为3个字符',
    appNameMaxLength: '不能超过63个字符',
    alreadyExists: '已经存在',
    appNameCheckEndMessage: '由字母或数字结尾',
    appTemplateLengthLimit: '模板名称需在3-63位之间',
    appTemplateCheckStartMsg: '请以字母或数字开头',
    appTempCheckEndMsg: '由字母或数字结尾',
    appTempCheckComposeMsg: '由字母、数字、下划线_组成，特殊符号不能连续出现',
    accessPath: '访问路径',
    accessPathRegMsg: '以/开头，由数字、字母、中划线、下划线组成',
    containerPortRegMsg: '容器端口必须为数字',
    containerPortRangeMsg: '容器端口必须在1-65535之间',
    configIngress: '配置监听器',
    healthCheck: '健康检查',
    checkDirectory: '检测目录',
    ingressDirPlaceholder: '不填写则默认检查 / 根目录',
    checkInterval: '检测间隔',
    unhealthyThreshold: '不健康阈值',
    times: '次',
    healthyThreshold: '健康阈值',
    httpStatueCodeCheck: 'HTTP 状态码检测',
    ingressHttpTip: '当状态码为以上值时，认为后端服务存活',
    validating: '校验中',
    roundRobin: '加权轮询',
    leastConnect: '最小连接数',
    ipHash: '源地址散列IP_HASH',
    enableSession: '启用会话',
    holdTime: '保持时间',
    turnedOn: '已开启',
    unopened: '未开启',
    addHttpHeader: '添加 HTTP 头',
    clientIPEnabled: '已开启客户端真实 IP',
    throughXForwardedFor: '通过 X-Forwarded-For 头字段获取',
    lbEnabled: '已开启负载均衡监听协议',
    throughXForwardedProto: '通过 X-Forwarded-Proto 头字段获取',
    serviceLocationPlaceholder: '请输入服务位置，例如 www.example.com/www/index.html',
    accessPathPlaceholder: '请输入访问路径，以 / 开头',
    containerPortSingleSlt: '容器端口不支持多选',
    monitorPortIsRequired: '监听端口不能为空',
    containerPortIsRequired: '容器端口不能为空',
    configMonitor: '配置 {item} 监听器',
    innerClusterLB: '集群内负载均衡',
    outerClusterLB: '集群外负载均衡',
    createLB: '创建负载均衡',
    listeningRule: '监听规则',
    addIngress: '添加 {item} 监听器',
    containerPortRange: '容器端口范围为{min}~{max}',
    portExist: '已填写过该端口',
    portRequired: '映射端口至少保留一个',
    portProtocol: '端口协议',
    mapServicePortType: '映射服务端口类型',
    designatedPort: '指定端口',
    delete: '删除',
    mapPort: '映射端口',
    exposeProtocol: '暴露协议',
    protocol: '协议',
    mapServicePort: '映射服务端口',
    addMapPort: '添加映射端口',
    loadDataFailed: '获取列表数据出错',
    securityGroup: '安全组',
    securityGroupTip: '安全组是逻辑上的一个分组，安全组内服务互通，安全组外服务需配置（ingress/egress）白名单规则',
    refresh: '刷新',
    createSecurityGroup: '新建安全组',
    startCommand: '启动命令',
    plsSltImagePullPolicy: '请选择重新部署拉取镜像方式',
    assistSetting: '辅助设置',
    assistSettingTip: '一些常用的辅助设置：①容器进入点，②启动执行命令，③重新部署所用镜像，④容器时区设置',
    entryPoint: '进入点',
    entryPointPlaceholder: '配置容器启动后执行的命令',
    imageDefault: '镜像默认',
    addStartCommand: '添加一个启动命令',
    redeploy: '重新部署',
    prioritizeLocalImage: '优先使用本地镜像',
    pullCloudImage: '始终拉取云端该版本镜像',
    timeZoneSetting: '时区设置',
    useHostTimeZone: '使用所在主机节点的时区',
    timeZoneTip: '选中后，可以保证容器始终与其所在的主机节点保持一致',
    plsEntLogDir: '请输入正确的日志目录',
    logDirDiffStorageDir: '日志收集目录不能与存储挂载目录相同',
    collectingFileRules: '采集文件规则',
    plsEntRegRule: '请输入合法的正则表达式规则',
    logDir: '日志目录',
    logDirPlaceholder: '例如:/var/log',
    logDirTooltip: '输入要采集日志的目录',
    collectionRule: '采集规则',
    collectRulePlaceholder: '例如:^access\\.log\\.[0-9\\-]{10}$',
    collectionRuleTooltip: '匹配正则表达式的文件将会被监控',
    exclusionRule: '排除规则',
    exclusionRulePlaceholder: '例如:^access\\.temp\\.[0-9\\-]{10}$',
    exclusionRuleTooltip: '匹配正则表达式的文件将不会被监控',
    logCollection: '日志采集',
    logCollectionTip: '采集应用的运行日志，结合平台的日志查询功能提供托管式、一站式日志采集、查询服务',
    sourceType: '来源类型',
    collectContainerStandardLog: '仅采集容器标准日志',
    collectDirLog: '同时进行目录内日志采集',
    port: '端口',
    firstCheckDelay: '首次检查延时',
    checkTimeout: '检查超时',
    path: 'Path 路径',
    highAvailability: '高可用',
    highAvailabilityTip: '设置重启检查项目，如遇到检查项不满足，为自动保证服务高可用，将自动重启该服务',
    no: '无',
    recommend: '推荐',
    httpTip: '通过 HTTP GET 请求进行健康检查。如果响应状态码小于 400，则认为容器健康',
    tcpTip: '检测端口是否为打开状态，若端口为关闭或进程停止关闭状态，则健康检查不通过',
    configuration: '配置',
    configClassify: '配置分类',
    configGroup: '配置组',
    configGroupName: '配置组名称',
    configGroupLengthLimit: '名称长度为 3-63 个字符',
    configGroupStartLimit: '名称须以小写字母开头',
    configGroupEndLimit: '名称须以小写字母或数字结尾',
    configGroupComposeLimit: '由小写字母、数字和连字符（-）组成',
    mountDirectory: '挂载目录',
    coverageMethod: '覆盖方式',
    configGroupFile: '配置组文件',
    mountPathPlaceholder: '挂载目录，例如：/App',
    mountSeveralFiles: '挂载若干配置文件',
    mountSeveralTooltip: '镜像内该目录『同名文件』会给覆盖，修改配置文件需『重启容器』来生效',
    mountConfigGroup: '挂载整个配置组',
    mountConfigGroupTooltip: '镜像内该目录『所有文件』会被覆盖，支持『不重启容器』5 min 左右生效（含增、删、改配置文件）。',
    selectAll: '全选',
    configManage: '配置管理',
    configManageTip: '满足您统一管理某些服务配置文件的需求，即：不用停止服务，即可变更多个容器内的配置文件',
    normalConfig: '普通配置',
    configFiles: '配置文件',
    addConfigDir: '添加配置目录',
    mountSeveralEncryptedFiles: '挂载若干加密对象',
    mountEncryptedTooltip: '镜像内该目录『所有文件』会被覆盖，支持『不重启容器』5 min 左右生效（含增、删、改加密对象）。',
    secretConfigTip: '满足您统一管理某些服务加密对象的需求，即：不用停止服务，即可变更多个容器内的加密对象',
    secretConfig: '加密配置',
    secretConfigTooltip: '加密配置将通过 volume 的方式，将需要加密的加密对象挂载到指定目录，如：挂载目录为 /db-token，加密对象为 user、passwd，则挂载结果为 /db-token/user、/db-token/passwd',
    secretFile: '加密对象',
    listeningPortBeUsed: '监听端口已使用',
    setHostname: '设定 HostName',
    containerNetwork: '容器网络',
    containerNetworkTip: '设置容器的网络和 DNS 选项',
    setHostAliases: '设定主机别名',
    ipHost: 'IP 地址',
    hostAliases: '主机别名',
    ipHostRegMeg: 'IP 地址格式不正确',
    hostAliasesRegMeg: '由小写字母、数字、字符 - 或 . 组成，以字母、数字开头和结尾',
    hostAliasesLengthLimit: '主机别名不能超过 63 个字符',
    addHostAliases: '添加主机别名',
    ipHostPlaceholder: '如：192.168.0.1',
    ipHostIsRequired: 'IP 地址不能为空',
    hostName: '主机名',
    hostAliasesTip: '/etc/hosts 记录',
    subdomainPlaceholder: '例如：foo',
    subdomain: '子域',
    hostAliasesPlaceholder: '如：example.com',
    hostnameRegMsg: '由小写字母、数字、字符 - 组成，以字母、数字开头和结尾',
    subdomainRegMsg: '由小写字母、数字、字符 - 组成，以字母、数字开头和结尾',
    hostAliasesExist: '主机别名已存在',
    ipPodPlaceholder: `请填写实例 IP( 需属于 {NetSegment} )`,
    supportOnlyOne: '目前仅支持一个实例',
    NetSegmentUnknow: "未获取到指定 Pod 网段",
    checkNetSegmentFail: "校验 IP 是否被占用请求失败",
    isUsedAlready: "当前 IP 已经被占用, 请重新填写",
    getNetSegmentFail: "获取 Pod 网段数据失败",
    probeType: "类型",
  }
}

export default defineIntlMessages(messageObj)
